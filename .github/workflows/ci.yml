#
# Copyright (c) 2023 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#
name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "0 6 * * 1-5"

jobs:
  check:
    name: Run checks on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        run: |
          rustup show
          rustup component add rustfmt clippy

      - name: Code format check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- -D warnings
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

      - name: Clippy unstable
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --features unstable -- -D warnings
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

      - name: Clippy shared-memory
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --features shared-memory --features transport_unixpipe -- -D warnings

  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Install latest Rust toolchain
        run: rustup show

      - name: Set rustflags
        shell: bash
        run: |
          case ${{ matrix.os }} in
            *windows*) echo "RUSTFLAGS=-Clink-arg=/DEBUG:NONE" >> $GITHUB_ENV ;;
          esac

      - name: Install nextest
        run: cargo install cargo-nextest --locked

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run --exclude zenoh-examples --exclude zenoh-plugin-example --workspace
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
          ASYNC_STD_THREAD_COUNT: 4

      - name: Run tests with SHM
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run -F shared-memory -F transport_unixpipe -p zenoh-transport
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
          ASYNC_STD_THREAD_COUNT: 4

      - name: Run doctests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --doc
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
          ASYNC_STD_THREAD_COUNT: 4

  nostd:
    name: Run no_std checks
    runs-on: ubuntu-latest
    needs: check
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Install nightly Rust toolchain
        # Generic no_std target architecture is x86_64-unknown-none
        run: |
          rustup override set nightly
          rustup target add --toolchain nightly x86_64-unknown-none

      - name: Perform no_std checks
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --bin nostd_check --target x86_64-unknown-none --manifest-path ci/nostd-check/Cargo.toml
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
