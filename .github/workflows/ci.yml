#
# Copyright (c) 2023 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#
name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "0 6 * * 1-5"

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CARGO_PROFILE_DEV_DEBUG: false
  RUSTUP_WINDOWS_PATH_ADD_BIN: 1
  # NOTE(fuzzypixelz): This should be changed to "minor" during a release cycle
  # with plans for changes that REQUIRE a minor version bump as defined by the Cargo reference
  # (https://doc.rust-lang.org/cargo/reference/semver.html).
  # However, a minor release could be published without such changes, in which case this variable need not be changed.
  CARGO_SEMVER_CHECKS_RELEASE_TYPE: patch
  # NOTE(fuzzypixelz): cargo-semver-checks uses the previous released version as a baseline, not the latest released
  # version on crates.io. Thus this needs to be updated after every release.
  CARGO_SEMVER_CHECKS_BASELINE_VERSION: 1.0.0

jobs:
  check:
    name: Lints and doc tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - name: Clone this repository
        uses: actions/checkout@v4

      - name: Update Stable Rust toolchain
        run: rustup update stable

      - name: Setup rust-cache
        uses: Swatinem/rust-cache@v2

      - name: Install latest cargo-deny
        uses: taiki-e/install-action@cargo-deny

      - name: Install latest cargo-machete
        uses: taiki-e/install-action@cargo-machete

      - name: Install latest cargo-semver-checks
        uses: taiki-e/install-action@cargo-semver-checks

      - name: Code format check
        run: cargo fmt --check -- --config "unstable_features=true,imports_granularity=Crate,group_imports=StdExternalCrate"

      - name: Clippy zenoh no-default-features
        run: cargo +stable clippy -p zenoh --all-targets --no-default-features -- --deny warnings

      - name: Clippy zenoh
        run: cargo +stable clippy -p zenoh --all-targets -- --deny warnings

      - name: Clippy zenoh unstable
        run: cargo +stable clippy -p zenoh --all-targets --features unstable -- --deny warnings

      - name: Clippy zenoh internal
        run: cargo +stable clippy -p zenoh --all-targets --features unstable,internal -- --deny warnings

      - name: Clippy zenoh shared-memory
        run: cargo +stable clippy -p zenoh --all-targets --features unstable,shared-memory -- --deny warnings

      - name: Clippy workspace
        run: cargo +stable clippy --all-targets --features test -- --deny warnings

      - name: Clippy workspace unstable
        run: cargo +stable clippy --all-targets --features unstable,test -- --deny warnings

      - name: Clippy all features
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest' }}
        run: cargo +stable clippy --all-targets --all-features -- --deny warnings

      - name: Install generic no_std target
        # Generic no_std target architecture is x86_64-unknown-none
        run: rustup target add x86_64-unknown-none

      - name: Perform no_std checks
        run: cargo check --bin nostd_check --target x86_64-unknown-none --manifest-path ci/nostd-check/Cargo.toml

      - name: Run doctests
        run: cargo test --doc

      - name: Build doc
        run: cargo doc --no-deps --features unstable
        env:
          RUSTDOCFLAGS: -Dwarnings

      - name: Check licenses
        run: cargo deny check licenses

      - name: Check unused dependencies
        run: cargo machete

      - name: Check SemVer Compatibility
        run: cargo +stable semver-checks --verbose --default-features --package zenoh --release-type ${{ env.CARGO_SEMVER_CHECKS_RELEASE_TYPE }} --baseline-version ${{ env.CARGO_SEMVER_CHECKS_BASELINE_VERSION }}

  test:
    name: Unit tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - name: Clone this repository
        uses: actions/checkout@v4

      - name: Install latest Rust toolchain
        run: rustup show

      - name: Setup rust-cache
        uses: Swatinem/rust-cache@v2

      - name: Set rustflags
        shell: bash
        run: |
          case ${{ matrix.os }} in
            *windows*) echo "RUSTFLAGS=-Clink-arg=/DEBUG:NONE" >> $GITHUB_ENV ;;
          esac

      - name: Install latest nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests
        run: cargo nextest run -F test -F internal_config --exclude zenoh-examples --exclude zenoh-plugin-example --workspace

      - name: Run tests with SHM
        if: ${{ matrix.os == 'macOS-latest' || matrix.os == 'windows-latest' }}
        run: cargo nextest run -F test -F shared-memory -F unstable -F internal_config -E 'not (test(test_default_features))' --exclude zenoh-examples --exclude zenoh-plugin-example --workspace

      - name: Run tests with SHM + unixpipe
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cargo nextest run -F test -F shared-memory -F unstable -F internal_config -F transport_unixpipe -E 'not (test(test_default_features))' --exclude zenoh-examples --exclude zenoh-plugin-example --workspace

      - name: Check for feature leaks
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cargo nextest run -p zenohd --no-default-features

  valgrind:
    name: Memory leak checks
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Clone this repository
        uses: actions/checkout@v4

      - name: Install latest Rust toolchain
        run: rustup show

      - name: Install valgrind
        uses: taiki-e/install-action@valgrind

      - uses: Swatinem/rust-cache@v2

      - name: Run memory leaks check
        run: ci/valgrind-check/run.sh
        shell: bash

  typos:
    name: Typos Check
    runs-on: ubuntu-latest
    steps:
      - name: Clone this repository
        uses: actions/checkout@v4

      - name: Check spelling
        uses: crate-ci/typos@master
  
  markdown_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DavidAnson/markdownlint-cli2-action@v18
        with:
          config: '.markdownlint.yaml'
          globs: '**/README.md'

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: [check, test, valgrind, typos, markdown_lint]
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'
